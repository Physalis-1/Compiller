
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftARITHMETIC_OPERATOR1leftARITHMETIC_OPERATOR2rightUMINUSAND ARITHMETIC_OPERATOR1 ARITHMETIC_OPERATOR2 ASSIGN_OPERATOR BEGIN BREAK COMMA CONTINUE DO ELSE END FUNCTION ID IF INTEGER NOT OR PROCEDURE REAL THEN VAR WHILE WRITE cl_bracket colon colonss equally integer less literal more op_bracket point realprogramm : vars subprogram_declarations compound_statement point vars : VAR declarations\n         | empty declarations : declarations id_name colon type colonss\n                |  id_name colon type colonss id_name : ID\n                | id_name COMMA ID type : INTEGER\n                | REAL subprogram_declarations : subprogram_declarations subprogram_declarat colonss\n                | subprogram_declarat colonss\n                | empty subprogram_declarat : subprogram_head vars compound_statement  subprogram_head : PROCEDURE ID op_bracket parameters cl_bracket  colonss\n                    |  FUNCTION ID op_bracket parameters cl_bracket  colon type colonss parameters : id_name colon type\n                    | parameters colonss id_name colon type\n                    | emptycompound_statement  : BEGIN statement_list END    compound_statement1  : BEGIN statement_list1 END    statement_list1 : statement1 colonss\n                    | statement_list1 statement1 colonssstatement_list : statement colonss\n                    | statement_list statement colonssstatement : WRITE op_bracket text cl_bracket\n                | WRITE op_bracket elem1 cl_bracket\n                | id_name ASSIGN_OPERATOR elem1\n                | id_name ASSIGN_OPERATOR function_statement\n                | procedure_statement\n                | IF expression_list THEN compound_statement1 ELSE compound_statement1\n                | WHILE expression_list DO compound_statement1\n                | IF expression_list THEN compound_statement1\n                statement1  : st\n                    | statement    st  : BREAK\n             | CONTINUE     text : literal\n            | text COMMA literal procedure_statement : ID op_bracket id_name1 cl_bracket      function_statement  : ID op_bracket id_name1 cl_bracket    id_name1 : elem1\n                | id_name1 COMMA elem1 expression_list  : operator1 op_bracket elem1 comparision  elem1 cl_bracket\n                        | expression_list operator operator1 op_bracket  elem1 comparision  elem1 cl_bracket     comparision  : less\n        | more\n        | equally\n        | less more\n        | less equally\n        | more equally\n        | equally equally operator : AND\n                | OR   operator1 : NOT\n                |  emptyelem : ID\n    | integer\n    | real elem1 : elem1 ARITHMETIC_OPERATOR1 elem1\n           | elem1 ARITHMETIC_OPERATOR2 elem1\n           | ARITHMETIC_OPERATOR1 elem1 %prec UMINUS\n           | op_bracket elem1  cl_bracket\n           | elemempty :'
    
_lr_action_items = {'VAR':([0,8,100,136,],[3,3,-14,-15,]),'PROCEDURE':([0,2,4,5,7,11,17,25,58,84,],[-64,9,-3,9,-12,-2,-11,-10,-5,-4,]),'FUNCTION':([0,2,4,5,7,11,17,25,58,84,],[-64,10,-3,10,-12,-2,-11,-10,-5,-4,]),'BEGIN':([0,2,4,5,7,8,11,17,18,25,58,72,77,84,100,109,136,],[-64,-64,-3,16,-12,-64,-2,-11,16,-10,-5,94,94,-4,-14,94,-15,]),'$end':([1,24,],[0,-1,]),'ID':([3,9,10,11,16,23,26,35,36,44,45,46,52,58,59,60,64,76,81,84,89,90,92,94,99,110,116,117,118,119,120,128,131,132,133,134,137,138,],[13,19,20,13,33,41,33,13,13,-23,66,71,66,-5,-24,66,66,66,13,-4,66,66,66,33,66,33,66,66,-45,-46,-47,-21,-48,-49,-50,-51,-22,66,]),'colonss':([6,15,27,30,34,35,36,38,39,40,42,43,53,55,56,57,65,66,67,68,69,70,71,80,86,88,91,93,97,98,102,104,106,107,111,112,113,114,115,123,124,125,126,127,135,],[17,25,44,-29,-13,-64,-64,58,-8,-9,-19,59,81,-18,81,84,-63,-56,-57,-58,-27,-28,-56,100,-25,-26,-61,-32,-31,-39,-16,-62,-59,-60,128,-33,-34,-35,-36,136,-40,-30,-20,137,-17,]),'colon':([12,13,21,41,54,83,101,],[22,-6,37,-7,82,103,122,]),'COMMA':([12,13,21,29,33,41,54,61,63,65,66,67,68,78,79,91,101,104,105,106,107,108,121,],[23,-6,23,23,-6,-7,23,87,-37,-63,-56,-57,-58,99,-41,-61,23,-62,-38,-59,-60,99,-42,]),'point':([14,42,],[24,-19,]),'WRITE':([16,26,44,59,94,110,128,137,],[28,28,-23,-24,28,28,-21,-22,]),'IF':([16,26,44,59,94,110,128,137,],[31,31,-23,-24,31,31,-21,-22,]),'WHILE':([16,26,44,59,94,110,128,137,],[32,32,-23,-24,32,32,-21,-22,]),'op_bracket':([19,20,28,31,32,33,45,46,48,49,50,52,60,64,71,73,74,75,76,89,90,92,95,99,116,117,118,119,120,131,132,133,134,138,],[35,36,45,-64,-64,52,60,60,76,-54,-55,60,60,60,92,-64,-52,-53,60,60,60,60,116,60,60,60,-45,-46,-47,-48,-49,-50,-51,60,]),'INTEGER':([22,37,82,103,122,],[39,39,39,39,39,]),'REAL':([22,37,82,103,122,],[40,40,40,40,40,]),'END':([26,44,59,110,128,137,],[42,-23,-24,126,-21,-22,]),'ASSIGN_OPERATOR':([29,33,41,],[46,-6,-7,]),'NOT':([31,32,73,74,75,],[49,49,49,-52,-53,]),'cl_bracket':([35,36,39,40,53,55,56,61,62,63,65,66,67,68,78,79,85,91,102,104,105,106,107,108,121,130,135,140,],[-64,-64,-8,-9,80,-18,83,86,88,-37,-63,-56,-57,-58,98,-41,104,-61,-16,-62,-38,-59,-60,124,-42,139,-17,141,]),'literal':([45,87,],[63,105,]),'ARITHMETIC_OPERATOR1':([45,46,52,60,62,64,65,66,67,68,69,71,76,79,85,89,90,91,92,96,99,104,106,107,116,117,118,119,120,121,129,130,131,132,133,134,138,140,],[64,64,64,64,89,64,-63,-56,-57,-58,89,-56,64,89,89,64,64,-61,64,89,64,-62,-59,-60,64,64,-45,-46,-47,89,89,89,-48,-49,-50,-51,64,89,]),'integer':([45,46,52,60,64,76,89,90,92,99,116,117,118,119,120,131,132,133,134,138,],[67,67,67,67,67,67,67,67,67,67,67,67,-45,-46,-47,-48,-49,-50,-51,67,]),'real':([45,46,52,60,64,76,89,90,92,99,116,117,118,119,120,131,132,133,134,138,],[68,68,68,68,68,68,68,68,68,68,68,68,-45,-46,-47,-48,-49,-50,-51,68,]),'THEN':([47,139,141,],[72,-43,-44,]),'AND':([47,51,139,141,],[74,74,-43,-44,]),'OR':([47,51,139,141,],[75,75,-43,-44,]),'DO':([51,139,141,],[77,-43,-44,]),'ARITHMETIC_OPERATOR2':([62,65,66,67,68,69,71,79,85,91,96,104,106,107,121,129,130,140,],[90,-63,-56,-57,-58,90,-56,90,90,-61,90,-62,90,-60,90,90,90,90,]),'less':([65,66,67,68,91,96,104,106,107,129,],[-63,-56,-57,-58,-61,118,-62,-59,-60,118,]),'more':([65,66,67,68,91,96,104,106,107,118,129,],[-63,-56,-57,-58,-61,119,-62,-59,-60,131,119,]),'equally':([65,66,67,68,91,96,104,106,107,118,119,120,129,],[-63,-56,-57,-58,-61,120,-62,-59,-60,132,133,134,120,]),'ELSE':([93,126,],[109,-20,]),'BREAK':([94,110,128,137,],[114,114,-21,-22,]),'CONTINUE':([94,110,128,137,],[115,115,-21,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programm':([0,],[1,]),'vars':([0,8,],[2,18,]),'empty':([0,2,8,31,32,35,36,73,],[4,7,4,50,50,55,55,50,]),'subprogram_declarations':([2,],[5,]),'subprogram_declarat':([2,5,],[6,15,]),'subprogram_head':([2,5,],[8,8,]),'declarations':([3,],[11,]),'id_name':([3,11,16,26,35,36,81,94,110,],[12,21,29,29,54,54,101,29,29,]),'compound_statement':([5,18,],[14,34,]),'statement_list':([16,],[26,]),'statement':([16,26,94,110,],[27,43,113,113,]),'procedure_statement':([16,26,94,110,],[30,30,30,30,]),'type':([22,37,82,103,122,],[38,57,102,123,135,]),'expression_list':([31,32,],[47,51,]),'operator1':([31,32,73,],[48,48,95,]),'parameters':([35,36,],[53,56,]),'text':([45,],[61,]),'elem1':([45,46,52,60,64,76,89,90,92,99,116,117,138,],[62,69,79,85,91,96,106,107,79,121,129,130,140,]),'elem':([45,46,52,60,64,76,89,90,92,99,116,117,138,],[65,65,65,65,65,65,65,65,65,65,65,65,65,]),'function_statement':([46,],[70,]),'operator':([47,51,],[73,73,]),'id_name1':([52,92,],[78,108,]),'compound_statement1':([72,77,109,],[93,97,125,]),'statement_list1':([94,],[110,]),'statement1':([94,110,],[111,127,]),'st':([94,110,],[112,112,]),'comparision':([96,129,],[117,138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programm","S'",1,None,None,None),
  ('programm -> vars subprogram_declarations compound_statement point','programm',4,'p_programm','Parser.py',15),
  ('vars -> VAR declarations','vars',2,'p_vars','Parser.py',19),
  ('vars -> empty','vars',1,'p_vars','Parser.py',20),
  ('declarations -> declarations id_name colon type colonss','declarations',5,'p_declarations','Parser.py',28),
  ('declarations -> id_name colon type colonss','declarations',4,'p_declarations','Parser.py',29),
  ('id_name -> ID','id_name',1,'p_id_name','Parser.py',38),
  ('id_name -> id_name COMMA ID','id_name',3,'p_id_name','Parser.py',39),
  ('type -> INTEGER','type',1,'p_type','Parser.py',49),
  ('type -> REAL','type',1,'p_type','Parser.py',50),
  ('subprogram_declarations -> subprogram_declarations subprogram_declarat colonss','subprogram_declarations',3,'p_subprogram_declarations','Parser.py',55),
  ('subprogram_declarations -> subprogram_declarat colonss','subprogram_declarations',2,'p_subprogram_declarations','Parser.py',56),
  ('subprogram_declarations -> empty','subprogram_declarations',1,'p_subprogram_declarations','Parser.py',57),
  ('subprogram_declarat -> subprogram_head vars compound_statement','subprogram_declarat',3,'p_subprogram_declarat','Parser.py',68),
  ('subprogram_head -> PROCEDURE ID op_bracket parameters cl_bracket colonss','subprogram_head',6,'p_subprogram_head','Parser.py',73),
  ('subprogram_head -> FUNCTION ID op_bracket parameters cl_bracket colon type colonss','subprogram_head',8,'p_subprogram_head','Parser.py',74),
  ('parameters -> id_name colon type','parameters',3,'p_parameters','Parser.py',82),
  ('parameters -> parameters colonss id_name colon type','parameters',5,'p_parameters','Parser.py',83),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',84),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser.py',93),
  ('compound_statement1 -> BEGIN statement_list1 END','compound_statement1',3,'p_compound_statement1','Parser.py',98),
  ('statement_list1 -> statement1 colonss','statement_list1',2,'p_statement_list1','Parser.py',103),
  ('statement_list1 -> statement_list1 statement1 colonss','statement_list1',3,'p_statement_list1','Parser.py',104),
  ('statement_list -> statement colonss','statement_list',2,'p_statement_list','Parser.py',112),
  ('statement_list -> statement_list statement colonss','statement_list',3,'p_statement_list','Parser.py',113),
  ('statement -> WRITE op_bracket text cl_bracket','statement',4,'p_statement','Parser.py',121),
  ('statement -> WRITE op_bracket elem1 cl_bracket','statement',4,'p_statement','Parser.py',122),
  ('statement -> id_name ASSIGN_OPERATOR elem1','statement',3,'p_statement','Parser.py',123),
  ('statement -> id_name ASSIGN_OPERATOR function_statement','statement',3,'p_statement','Parser.py',124),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',125),
  ('statement -> IF expression_list THEN compound_statement1 ELSE compound_statement1','statement',6,'p_statement','Parser.py',126),
  ('statement -> WHILE expression_list DO compound_statement1','statement',4,'p_statement','Parser.py',127),
  ('statement -> IF expression_list THEN compound_statement1','statement',4,'p_statement','Parser.py',128),
  ('statement1 -> st','statement1',1,'p_statement1','Parser.py',147),
  ('statement1 -> statement','statement1',1,'p_statement1','Parser.py',148),
  ('st -> BREAK','st',1,'p_st','Parser.py',152),
  ('st -> CONTINUE','st',1,'p_st','Parser.py',153),
  ('text -> literal','text',1,'p_text','Parser.py',158),
  ('text -> text COMMA literal','text',3,'p_text','Parser.py',159),
  ('procedure_statement -> ID op_bracket id_name1 cl_bracket','procedure_statement',4,'p_procedure_statement','Parser.py',167),
  ('function_statement -> ID op_bracket id_name1 cl_bracket','function_statement',4,'p_function_statement','Parser.py',172),
  ('id_name1 -> elem1','id_name1',1,'p_id_name1','Parser.py',177),
  ('id_name1 -> id_name1 COMMA elem1','id_name1',3,'p_id_name1','Parser.py',178),
  ('expression_list -> operator1 op_bracket elem1 comparision elem1 cl_bracket','expression_list',6,'p_expression_list','Parser.py',186),
  ('expression_list -> expression_list operator operator1 op_bracket elem1 comparision elem1 cl_bracket','expression_list',8,'p_expression_list','Parser.py',187),
  ('comparision -> less','comparision',1,'p_comparision','Parser.py',195),
  ('comparision -> more','comparision',1,'p_comparision','Parser.py',196),
  ('comparision -> equally','comparision',1,'p_comparision','Parser.py',197),
  ('comparision -> less more','comparision',2,'p_comparision','Parser.py',198),
  ('comparision -> less equally','comparision',2,'p_comparision','Parser.py',199),
  ('comparision -> more equally','comparision',2,'p_comparision','Parser.py',200),
  ('comparision -> equally equally','comparision',2,'p_comparision','Parser.py',201),
  ('operator -> AND','operator',1,'p_operator','Parser.py',210),
  ('operator -> OR','operator',1,'p_operator','Parser.py',211),
  ('operator1 -> NOT','operator1',1,'p_operator1','Parser.py',216),
  ('operator1 -> empty','operator1',1,'p_operator1','Parser.py',217),
  ('elem -> ID','elem',1,'p_elem','Parser.py',222),
  ('elem -> integer','elem',1,'p_elem','Parser.py',223),
  ('elem -> real','elem',1,'p_elem','Parser.py',224),
  ('elem1 -> elem1 ARITHMETIC_OPERATOR1 elem1','elem1',3,'p_elem1','Parser.py',229),
  ('elem1 -> elem1 ARITHMETIC_OPERATOR2 elem1','elem1',3,'p_elem1','Parser.py',230),
  ('elem1 -> ARITHMETIC_OPERATOR1 elem1','elem1',2,'p_elem1','Parser.py',231),
  ('elem1 -> op_bracket elem1 cl_bracket','elem1',3,'p_elem1','Parser.py',232),
  ('elem1 -> elem','elem1',1,'p_elem1','Parser.py',233),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',247),
]
